import{C as m,r as B}from"./chart-D9yesOfx.js";import{_ as z,c as S,a as c,j as N,t as O,g as I,n as k,d as T}from"./index-D7X13bus.js";m.register(...B);const w={name:"StrategyChart",data(){return{isUiOpen:!0,loading:!0,loadingMessage:"Initializing...",chartsInitialized:!1,chartInitQueue:[],retryCount:0,maxRetries:3,dataInitialized:!1,currentChartIndex:0,chartLoadDelay:1e3,charts:new Map,doLinksExist:!1,linkProgression:[2,2,2,2,2,2,2,2],linkPoints:[0,0],pointsForBalancing:[0,12],pointsForBestScorer:[7,5],pointsForMidScorer:[6,4],pointsForOkScorer:[4,3],pointsForWorstScorer:[3,2],pointsForTrap:[0,0],pointsForMobility:3,autonPieceLimit:5,holdPieceLimit:1,piecesScoredForRnkPnt:[20,0],autonMovementName:'Auton Movement (s) ["=Teleop" sets this to equal teleop movement]',iteratingArrays:[["Balance/Climb/Hang (s)",5,6],["Output (s)",1.5,2,2.5],["Intake (s)",.75,1,1.25],['Auton Movement (s) ["=Teleop" sets this to equal teleop movement]',"=Teleop"],["Teleop Movement (s)",5,6,7],["Alliance robots leave auton (Boolean)",0,1],["At least one alliance robot parks (Boolean)",0,1],["Algae dislodge (s)",1],["Grab Amount (on average)",1]],iteratingArraysVisibleInputOffset:1,allPointsVsTime:[],allPieceCountVsTime:[],rnkValueVsScenario:[],pieceCountVsScenario:[],totalScoreVsScenario:[],pieceCountVsTotalScore:[],specificPointsVsTime:[],specificPieceCountVsTime:[],allColorOverTime:[],specificColorOverTime:[],color:[],scenarioAction:[],scenarioTimes:[],pointsClicked:[],zeroIndicesPointsClicked:[],scenario:{points:0,time:150,z:0},piecesScored:[],holdingPiece:[],links:[],numberOfScenarios:1,endpoints:[-1],endpointsofspecificPieceCountVsTime:[-1],groupsofpoints:[],coordinatesofgroups:[],zeroindices:[],maxs:[],mins:[],maxDecimals:0,scenariochart:null,rnkpntchart:null,pschart:null,piecesschart:null,psotchart:null,scoretimechart:null}},mounted(){this.loadingMessage="Preparing data...",setTimeout(()=>{this.initializeData()},1e3),window.addEventListener("resize",this.handleResize)},beforeUnmount(){window.removeEventListener("resize",this.handleResize),this.destroyCharts()},methods:{l(...e){console.log(...e)},handleResize(){this.dataInitialized&&this.$nextTick(()=>{this.updateCharts()})},destroyCharts(){for(const e of this.charts.values())e.destroy();this.charts.clear()},inputToggled(e){this.isUiOpen=e.target.open;const t=document.getElementsByClassName("scroller")[0],a=document.getElementsByClassName("scroller")[1];t&&a&&(t.classList.contains("scrollerOpen")?(t.classList.remove("scrollerOpen"),a.classList.remove("scrollerOpen")):(t.classList.add("scrollerOpen"),a.classList.add("scrollerOpen")))},initializeData(){try{if(this.loading=!0,this.loadingMessage="Preparing data...",this.chartsInitialized=!1,this.destroyCharts(),sessionStorage.getItem("iteratingArrays"))try{this.iteratingArrays=JSON.parse(sessionStorage.getItem("iteratingArrays"))}catch(t){console.error("Error parsing iteratingArrays from sessionStorage:",t)}const e=this.iteratingArrays.flat(1).filter(t=>typeof t!="string"&&!isNaN(t));this.maxDecimals=e.reduce((t,a)=>{const s=a.toString().split(".")[1];return Math.max(t,s?s.length:0)},0),this.initializeUI(),this.numberOfScenarios=1;for(let t of this.iteratingArrays)this.numberOfScenarios*=t.length-1;this.clearChartData(),this.loadingMessage="Generating scenarios data...",setTimeout(()=>{this.generateScenariosDataInChunks(0,Math.min(50,this.numberOfScenarios))},500)}catch(e){console.error("Error initializing data:",e),this.loading=!1,this.loadingMessage="Error initializing data. Please try again."}},clearChartData(){this.allPointsVsTime=[],this.allPieceCountVsTime=[],this.rnkValueVsScenario=[],this.pieceCountVsScenario=[],this.totalScoreVsScenario=[],this.pieceCountVsTotalScore=[],this.specificPointsVsTime=[],this.specificPieceCountVsTime=[],this.allColorOverTime=[],this.specificColorOverTime=[],this.color=[],this.scenarioAction=[],this.scenarioTimes=[],this.pointsClicked=[],this.zeroIndicesPointsClicked=[],this.piecesScored=[],this.holdingPiece=[],this.links=[],this.endpoints=[-1],this.endpointsofspecificPieceCountVsTime=[-1],this.groupsofpoints=[],this.coordinatesofgroups=[],this.zeroindices=[],this.maxs=[],this.mins=[]},initializeUI(){const e=document.getElementById("ui");if(e){e.innerHTML="";for(let t=0;t<this.iteratingArrays.length;++t)t>=this.iteratingArrays.length-this.iteratingArraysVisibleInputOffset?e.innerHTML+=`<div style='display:none'>
                    ${this.iteratingArrays[t][0]}: 
                    <input id="ui${t}" value="${this.iteratingArrays[t].slice(1)}" >
                    </div>`:e.innerHTML+=`<div class="input-group">
                    <label for="ui${t}">${this.iteratingArrays[t][0]}:</label>
                    <input id="ui${t}" value="${this.iteratingArrays[t].slice(1)}" class="ui-input">
                    </div>`}},generateScenariosDataInChunks(e,t){try{const s=Math.min(t,this.numberOfScenarios),i=Math.round(s/this.numberOfScenarios*100);this.loadingMessage=`Generating scenarios data... ${i}%`;for(let r=e;r<s;++r)this.generateSingleScenarioData(r);s<this.numberOfScenarios?setTimeout(()=>{this.generateScenariosDataInChunks(s,s+50)},0):(this.loadingMessage="Calculating endpoints...",setTimeout(()=>{this.calculateEndpoints(),this.loadingMessage="Creating groups of points...",setTimeout(()=>{this.createGroupsOfPoints(),this.loadingMessage="Updating data...",setTimeout(()=>{this.updatedata(0),this.loadingMessage="Initializing charts...",setTimeout(()=>{this.initializeChartsStaggered()},500)},500)},500)},500))}catch(a){console.error("Error generating scenarios data in chunks:",a),this.loading=!1,this.loadingMessage="Error generating data. Please try again."}},generateSingleScenarioData(e){const t=this.decodeScenario(e);for(let i in this.iteratingArrays)this.scenario[this.iteratingArrays[i][0]]=this.iteratingArrays[i][Number(t.charAt(i))+1];for(let i of this.iteratingArrays)if(i[0]==this.autonMovementName&&i[1]=="=Teleop"){this.scenario[this.autonMovementName]=this.scenario["Teleop Movement (s)"];break}this.piecesScored[0]=0,this.holdingPiece[0]=1,this.scenario.time=150,this.scenario.points=this.pointsForMobility,this.piecesScored[0]=0;const a=this.scenario["Balance/Climb/Hang (s)"]*(this.pointsForBalancing[0]>0);if(this.scenario.time-this.scenario[this.autonMovementName]/2-a>=135)for(this.scenario.time-=this.scenario[this.autonMovementName]/2;this.scenario.time-this.scenario["Output (s)"]-a>=135&&this.piecesScored[0]<this.autonPieceLimit;)this.autonScorePiece(e),this.scenario.time-this.scenario[this.autonMovementName]/2-this.scenario["Intake (s)"]>=135&&(this.scenario.time-=this.scenario[this.autonMovementName]/2+this.scenario["Intake (s)"],this.holdingPiece[0]+=this.scenario["Grab Amount (on average)"],this.piecesScored[0]+this.holdingPiece[0]>this.autonPieceLimit&&(this.holdingPiece[0]=this.autonPieceLimit-this.piecesScored[0]),this.scenario.time-this.scenario[this.autonMovementName]/2-this.scenario["Output (s)"]-a>=135?this.scenario.time-=this.scenario[this.autonMovementName]/2:this.pointsForBalancing[0]>0?(this.scenario.time=135+a,this.scenario.points+=this.pointsForBalancing[0],this.scenario.time-=this.scenario["Balance/Climb/Hang (s)"],this.addPlotData(e,"Balance/Climb/Hang")):this.scenario.time=135);else this.scenario.time-a>=135&&(this.scenario.points+=this.pointsForBalancing[0],this.scenario.time-=this.scenario["Balance/Climb/Hang (s)"],this.addPlotData(e,"Balance/Climb/Hang"));if(this.scenario.time=135,this.holdingPiece[0]>0){this.piecesScored[0]+=this.holdingPiece[0],this.holdingPiece[0]=0,this.scenario.time-=this.scenario["Output (s)"],this.scenario.points+=this.pointsForBestScorer[1],this.allColorOverTime.push("rgb(0,0,0)");let i=!1;if(this.doLinksExist){let r=0;for(let n of this.linkProgression)r+=n,this.piecesScored[0]-r==0&&(this.scenario.points+=this.linkPoints[1],i=!0)}i?this.addPlotData(e,"scored speaker & link"):this.addPlotData(e,"scored coral into Lvl4")}for(;this.scenario.time-this.scenario["Teleop Movement (s)"]-this.scenario["Output (s)"]-this.scenario["Intake (s)"]-this.scenario["Balance/Climb/Hang (s)"]*(this.pointsForBalancing[1]>0)-this.scenario["Algae dislodge (s)"]*(this.piecesScored[0]==5||this.piecesScored[0]==7||this.piecesScored[0]==9)>=0&&(this.holdingPiece[0]+=this.scenario["Grab Amount (on average)"],this.scorePiece(e),this.piecesScored[0]!=42););this.scenario.points+=this.pointsForBalancing[1],this.scenario.time-=this.scenario["Balance/Climb/Hang (s)"],this.addPlotData(e,"Balance/Climb/Hang");let s=this.piecesScored[0]>=this.piecesScoredForRnkPnt[0]?1:0;this.scenario["Alliance robots leave auton (Boolean)"]&&++s,this.scenario["At least one alliance robot parks (Boolean)"]&&++s,s==3?(this.rnkValueVsScenario.push({x:e,y:3}),this.color.push("rgb(0,255,0)")):s==2?(this.rnkValueVsScenario.push({x:e,y:2}),this.color.push("rgb(255,255,0)")):s==1?(this.rnkValueVsScenario.push({x:e,y:1}),this.color.push("rgb(255,155,0)")):(this.rnkValueVsScenario.push({x:e,y:0}),this.color.push("rgb(255,0,0)")),this.totalScoreVsScenario.push({x:e,y:this.scenario.points}),this.pieceCountVsScenario.push({x:e,y:this.piecesScored[0]}),this.pieceCountVsTotalScore.push({x:this.scenario.points,y:this.piecesScored[0],scenario:e})},calculate(){try{const e=document.getElementById("recalculate");e&&(e.disabled=!0),this.loading=!0,this.loadingMessage="Preparing calculation...",this.chartsInitialized=!1,this.destroyCharts();for(let t in this.iteratingArrays){let a;const s=document.getElementById("ui"+t);if(s)if(this.iteratingArrays[t][0]===this.autonMovementName&&s.value==="=Teleop")this.iteratingArrays[t]=[this.autonMovementName,"=Teleop"];else{a=[this.iteratingArrays[t][0]];const i=s.value.split(",").map(r=>r.trim()).filter(r=>r!=="").map(r=>{const n=Number(r);return isNaN(n)?r:n});a.push(...i),this.iteratingArrays[t]=a}}sessionStorage.setItem("iteratingArrays",JSON.stringify(this.iteratingArrays)),setTimeout(()=>{this.initializeData()},500)}catch(e){console.error("Error in calculate method:",e);const t=document.getElementById("recalculate");t&&(t.disabled=!1),this.loading=!1,this.loadingMessage="Error during calculation. Please try again."}},encodeScenario(e){let t=0,a=1;for(let s=e.length-1;s>=0;--s)t+=e.charAt(s)*a,a*=this.iteratingArrays[s].length-1;return t},decodeScenario(e){let t=this.numberOfScenarios/(this.iteratingArrays[0].length-1),a="",s=e;for(let i in this.iteratingArrays)a+=Math.floor(s/t),s-=Math.floor(s/t)*t,this.iteratingArrays[Number(i)+1]&&(t/=this.iteratingArrays[Number(i)+1].length-1);return a},updatedata(e){try{const t=document.getElementById("selectedScenario");if(!t)return;const a=this.decodeScenario(e).substring(0,this.iteratingArrays.length-this.iteratingArraysVisibleInputOffset),s=this.iteratingArrays.slice(0,this.iteratingArrays.length-this.iteratingArraysVisibleInputOffset).map(([o,...p],g)=>{const y=Number(a.charAt(g)),C=p[y]??(p[0]==="=Teleop"?"=Teleop":p[0]);return`${o}: ${C}`}).join("<br>");t.innerHTML=`
                    <details open class='scenario-details'>
                    <summary class='scenario-summary'>Selected Scenario: ${e} - ${a}</summary>
                    <p class='scenario-info'>${s}</p>
                    </details>
                `;for(let o in this.scenarioTimes)this.scenarioTimes[o]&&this.scenarioTimes[o].includes("-")&&(console.error("Problem: a scenario takes longer than 2:30"),this.scenarioAction[o]-=0);let i=e;typeof e=="string"&&(i=this.encodeScenario(e));const r=this.endpoints[i]+1,n=this.endpoints[i+1],u=this.endpointsofspecificPieceCountVsTime[i]+1,f=this.endpointsofspecificPieceCountVsTime[i+1];if(this.specificPointsVsTime=[],this.specificPieceCountVsTime=[],this.specificColorOverTime=[],r<=n)for(let o=r;o<n+1;o++)this.allPointsVsTime[o]&&this.specificPointsVsTime.push(this.allPointsVsTime[o]);if(u<=f)for(let o=u;o<f+1;o++)this.allPieceCountVsTime[o]&&this.specificPieceCountVsTime.push(this.allPieceCountVsTime[o]),this.allColorOverTime[o]&&this.specificColorOverTime.push(this.allColorOverTime[o]);let l="",h="";this.scenarioAction[i]&&(l=this.scenarioAction[i]),this.scenarioTimes[i]&&(h=this.scenarioTimes[i]);let d=document.getElementById("table_id");if(d){for(;d.rows.length>1;)d.deleteRow(1);for(;l&&l.length>0;){let o=l.indexOf(";"),p=h.indexOf(";");if(o===-1||p===-1)break;const g=document.createElement("tr"),y=document.createElement("td"),C=document.createElement("td"),V=document.createElement("td");y.innerText=l.substring(0,o),C.innerText=Number(h.substring(0,p)).toFixed(this.maxDecimals),V.innerText=(150-h.substring(0,p)).toFixed(this.maxDecimals),l=l.substring(o+1),h=h.substring(p+1),g.appendChild(y),g.appendChild(C),g.appendChild(V),d.appendChild(g)}}let A=this.specificColorOverTime.filter(o=>o=="rgb(0,0,0)").length,L=this.specificColorOverTime.filter(o=>o=="rgb(150,150,150)").length,E=this.specificColorOverTime.filter(o=>o=="rgb(200,200,200)").length,M=this.specificColorOverTime.filter(o=>o=="rgb(255,255,255)").length;const b=document.getElementById("L1_Scored"),v=document.getElementById("L2_Scored"),P=document.getElementById("L3_Scored"),x=document.getElementById("L4_Scored");b&&(b.innerHTML=M),v&&(v.innerHTML=E),P&&(P.innerHTML=L),x&&(x.innerHTML=A),this.chartsInitialized&&setTimeout(()=>{this.updateCharts()},0)}catch(t){console.error("Error updating data:",t)}},updateCharts(){var e,t,a,s,i,r,n,u,f,l,h;try{if(!this.chartsInitialized)return;this.pschart&&((e=this.totalScoreVsScenario)!=null&&e.length)&&(this.charts.get("psChart").data.datasets[0].data=[...this.totalScoreVsScenario],(t=this.color)!=null&&t.length&&(this.charts.get("psChart").data.datasets[0].pointBackgroundColor=[...this.color]),this.charts.get("psChart").update("none")),this.piecesschart&&((a=this.pieceCountVsScenario)!=null&&a.length)&&(this.charts.get("piecesScoredchart").data.datasets[0].data=[...this.pieceCountVsScenario],(s=this.color)!=null&&s.length&&(this.charts.get("piecesScoredchart").data.datasets[0].pointBackgroundColor=[...this.color]),this.charts.get("piecesScoredchart").update("none")),this.scenariochart&&((i=this.pieceCountVsTotalScore)!=null&&i.length)&&(this.charts.get("scenarioChart").data.datasets[0].data=[...this.pieceCountVsTotalScore],(r=this.color)!=null&&r.length&&(this.charts.get("scenarioChart").data.datasets[0].pointBackgroundColor=[...this.color]),this.charts.get("scenarioChart").update("none")),this.rnkpntchart&&((n=this.rnkValueVsScenario)!=null&&n.length)&&(this.charts.get("rnkpntChart").data.datasets[0].data=[...this.rnkValueVsScenario],(u=this.color)!=null&&u.length&&(this.charts.get("rnkpntChart").data.datasets[0].pointBackgroundColor=[...this.color]),this.charts.get("rnkpntChart").update("none")),this.psotchart&&((f=this.specificPieceCountVsTime)!=null&&f.length)&&(this.charts.get("psotchart").data.datasets[0].data=[...this.specificPieceCountVsTime],(l=this.specificColorOverTime)!=null&&l.length&&(this.charts.get("psotchart").data.datasets[0].pointBackgroundColor=[...this.specificColorOverTime],this.charts.get("psotchart").data.datasets[0].borderColor=this.specificColorOverTime.map(d=>d=="rgb(255,255,255)"?"rgb(0,0,0)":d)),this.charts.get("psotchart").update("none")),this.scoretimechart&&((h=this.specificPointsVsTime)!=null&&h.length)&&(this.charts.get("myChart").data.datasets[0].data=[...this.specificPointsVsTime],this.charts.get("myChart").update("none"))}catch(d){console.error("Error updating charts:",d)}},autonScorePiece(e){this.piecesScored[0]+=this.holdingPiece[0],this.scenario.time-=this.scenario["Output (s)"],this.scenario.points+=this.pointsForBestScorer[0]*this.holdingPiece[0],this.holdingPiece[0]=0,this.allColorOverTime.push("rgb(0,0,0)"),this.addPlotData(e,"score coral in Lvl4")},scorePiece(e,t){(this.piecesScored[0]==5||this.piecesScored[0]==7||this.piecesScored[0]==9)&&(this.scenario.time-=this.scenario["Algae dislodge (s)"]),this.piecesScored[0]+=this.holdingPiece[0],this.holdingPiece[0]=0,this.scenario.time-=this.scenario["Teleop Movement (s)"]+this.scenario["Output (s)"]+this.scenario["Intake (s)"],t&&(this.scenario.time+=this.scenario["Teleop Movement (s)"]+this.scenario["Intake (s)"]);let a=!1;if(this.doLinksExist){let r=0;for(let n of this.linkProgression)r+=n,this.piecesScored[0]-r==0&&(this.scenario.points+=this.linkPoints[1],a=!0)}let s="coral",i;this.piecesScored[0]<=5?i="Lvl4":this.piecesScored[0]<=10?i="Lvl3":this.piecesScored[0]<=15?i="Lvl2":this.piecesScored[0]<=20?i="Lvl1":this.piecesScored[0]<=27?i="Lvl4":i="Lvl1",i=="Lvl1"?(this.scenario.points+=this.pointsForWorstScorer[1],this.allColorOverTime.push("rgb(255,255,255)")):i=="Lvl2"?(this.scenario.points+=this.pointsForOkScorer[1],this.allColorOverTime.push("rgb(200,200,200)")):i=="Lvl3"?(this.scenario.points+=this.pointsForMidScorer[1],this.allColorOverTime.push("rgb(150,150,150)")):i=="Lvl4"&&(this.scenario.points+=this.pointsForBestScorer[1],this.allColorOverTime.push("rgb(0,0,0)")),a?this.addPlotData(e,"scored piece & link"):this.addPlotData(e,"scored "+s+" into "+i)},addPlotData(e,t){this.allPointsVsTime.push({x:150-this.scenario.time,y:this.scenario.points}),this.scenarioAction[e]=(this.scenarioAction[e]??"")+t+";",this.scenarioTimes[e]=(this.scenarioTimes[e]??"")+this.scenario.time+";",(t.includes("score")||t.includes("collect"))&&this.allPieceCountVsTime.push({x:150-this.scenario.time,y:this.piecesScored[0]})},calculateEndpoints(){this.endpoints=[-1];for(let e=0;e<this.allPointsVsTime.length-1;++e)this.allPointsVsTime[e].x>this.allPointsVsTime[e+1].x&&this.endpoints.push(e);this.endpoints.push(this.allPointsVsTime.length-1),this.endpointsofspecificPieceCountVsTime=[-1];for(let e=0;e<this.allPieceCountVsTime.length-1;++e)this.allPieceCountVsTime[e].x>this.allPieceCountVsTime[e+1].x&&this.endpointsofspecificPieceCountVsTime.push(e);this.endpointsofspecificPieceCountVsTime.push(this.allPieceCountVsTime.length-1)},createGroupsOfPoints(){this.groupsofpoints=[],this.coordinatesofgroups=[];for(let e in this.pieceCountVsTotalScore){const t=this.pieceCountVsTotalScore[e].x+";"+this.pieceCountVsTotalScore[e].y;this.coordinatesofgroups.includes(t)?this.groupsofpoints[this.coordinatesofgroups.indexOf(t)].push(this.decodeScenario(e)):(this.groupsofpoints.push([this.decodeScenario(e)]),this.coordinatesofgroups.push(t))}this.zeroindices=[],this.maxs=[],this.mins=[];for(let e of this.groupsofpoints){this.zeroindices.push(e[0]);const t=[1/0,1/0,1/0,1/0,1/0,1/0,1/0],a=[-1/0,-1/0,-1/0,-1/0,-1/0,-1/0,-1/0];for(let s of e)for(let i=0;i<6;++i)s[i]<t[i]&&(t[i]=s[i]),s[i]>a[i]&&(a[i]=s[i]);this.maxs.push(a),this.mins.push(t)}},initializeChartsStaggered(){this.chartInitQueue=[{id:"psChart",type:"pschart",name:"Total Score vs Scenario"},{id:"piecesScoredchart",type:"piecesschart",name:"Pieces Scored vs Scenario"},{id:"scenarioChart",type:"scenariochart",name:"Pieces Scored vs Total Score"},{id:"rnkpntChart",type:"rnkpntchart",name:"Rank Points vs Scenario"},{id:"psotchart",type:"psotchart",name:"Pieces Scored vs Time"},{id:"myChart",type:"scoretimechart",name:"Score vs Time"}],this.currentChartIndex=0,this.processNextChart()},processNextChart(){if(this.currentChartIndex>=this.chartInitQueue.length){this.chartsInitialized=!0,this.dataInitialized=!0,this.loading=!1,this.loadingMessage="";return}const e=this.chartInitQueue[this.currentChartIndex];this.loadingMessage=`Initializing chart ${this.currentChartIndex+1} of ${this.chartInitQueue.length}: ${e.name}`,this.initializeSingleChart(e.id,e.type),this.currentChartIndex++,setTimeout(()=>{this.processNextChart()},this.chartLoadDelay)},handleChartClick(e){const t=e.target,a=t.getBoundingClientRect();e.clientX-a.left,e.clientY-a.top;const s=this.charts.get(t.id);if(!s)return;const i=s.getElementsAtEventForMode(e,"nearest",{intersect:!0},!1);if(i.length>0){const r=i[0],n=s.data.datasets[r.datasetIndex].data[r.index];this.updatedata(n.scenario||r.index)}},initializeSingleChart(e,t){try{const a=document.getElementById(e);if(!a){console.error(`Canvas element ${e} not found`);return}this.charts.has(e)&&(this.charts.get(e).destroy(),this.charts.delete(e));const s={responsive:!0,maintainAspectRatio:!0,aspectRatio:2,animation:{duration:750,easing:"easeOutQuart"},plugins:{legend:{display:!1}}};let i;switch(t){case"pschart":i=new m(a,{type:"scatter",data:{datasets:[{pointRadius:4,pointBackgroundColor:this.color,data:[...this.totalScoreVsScenario]}]},options:{...s,onClick:(r,n)=>{if(n.length>0){const u=n[0].index;this.updatedata(u)}},plugins:{...s.plugins,title:{display:!0,text:"TOTAL SCORE - SCENARIO",font:{size:16,weight:"bold"}},tooltip:{callbacks:{label:r=>{var n;return((n=this.totalScoreVsScenario[r.dataIndex])==null?void 0:n.y)||0}}}},scales:{x:{title:{display:!0,text:"Scenarios Encoded"},min:0,max:this.numberOfScenarios-1},y:{title:{display:!0,text:"Total Score"},min:0,max:100}}}});break;case"piecesschart":i=new m(a,{type:"scatter",data:{datasets:[{pointRadius:4,pointBackgroundColor:this.color,data:[...this.pieceCountVsScenario]}]},options:{...s,plugins:{...s.plugins,title:{display:!0,text:"PIECES SCORED - SCENARIO",font:{size:16,weight:"bold"}}},scales:{x:{title:{display:!0,text:"Scenarios Encoded"},min:0,max:this.numberOfScenarios-1},y:{title:{display:!0,text:"Pieces Scored"},min:0,max:20}}}});break;case"scenariochart":i=new m(a,{type:"scatter",data:{datasets:[{pointRadius:4,pointBackgroundColor:this.color,data:[...this.pieceCountVsTotalScore]}]},options:{...s,plugins:{...s.plugins,title:{display:!0,text:"Pieces Scored/collected if stockpile - Total Score",font:{size:16,weight:"bold"}}},scales:{x:{title:{display:!0,text:"Total Score"},min:0,max:100},y:{title:{display:!0,text:"Pieces Scored/Collected if stockpile"},min:0,max:20}}}});break;case"rnkpntchart":i=new m(a,{type:"scatter",data:{datasets:[{pointRadius:4,pointBackgroundColor:this.color,data:[...this.rnkValueVsScenario]}]},options:{...s,plugins:{...s.plugins,title:{display:!0,text:"RANK POINTS - SCENARIO",font:{size:16,weight:"bold"}}},scales:{x:{title:{display:!0,text:"Scenarios Encoded"},min:0,max:this.numberOfScenarios-1},y:{title:{display:!0,text:"Rank Points"},min:0,max:3,ticks:{stepSize:1}}}}});break;case"psotchart":i=new m(a,{type:"scatter",data:{datasets:[{pointRadius:4,borderColor:this.specificColorOverTime.map(r=>r=="rgb(255,255,255)"?"rgb(0,0,0)":r),pointBackgroundColor:this.specificColorOverTime,data:[...this.specificPieceCountVsTime]}]},options:{...s,plugins:{...s.plugins,title:{display:!0,text:"PIECES SCORED/collected if stockpile - TIME",font:{size:16,weight:"bold"}}},scales:{x:{title:{display:!0,text:"Time"},min:0,max:150},y:{title:{display:!0,text:"Pieces Scored/collected if stockpile"},min:0,max:20}}}});break;case"scoretimechart":i=new m(a,{type:"scatter",data:{datasets:[{pointRadius:4,pointBackgroundColor:"#4dabf7",data:[...this.specificPointsVsTime]}]},options:{...s,plugins:{...s.plugins,title:{display:!0,text:"SCORE - TIME",font:{size:16,weight:"bold"}}},scales:{x:{title:{display:!0,text:"Time"},min:0,max:150},y:{title:{display:!0,text:"Score"},min:0,max:100}}}});break}i&&this.charts.set(e,i)}catch(a){console.error(`Error initializing chart ${e}:`,a),this.retryCount<this.maxRetries&&(this.retryCount++,setTimeout(()=>{this.initializeSingleChart(e,t)},500))}}}},D={class:"strategy-chart-container"},R={class:"ui-container"},F={class:"ui-summary"},H={class:"summary-icon"},_=["disabled"],U={key:0,class:"button-text"},G={key:1,class:"button-text"},K={key:0,class:"loading-container"},j={class:"loading-text"},Q={class:"split-view"},$={class:"chart-container"},q={class:"split-view"};function J(e,t,a,s,i,r){return T(),S("div",D,[t[15]||(t[15]=c("h1",{class:"page-title"},"Strategy Charts",-1)),c("div",R,[c("details",{open:"",onToggle:t[1]||(t[1]=(...n)=>r.inputToggled&&r.inputToggled(...n)),class:"ui-details"},[c("summary",F,[t[6]||(t[6]=c("span",{class:"summary-text"},"UI Controls",-1)),c("span",H,O(i.isUiOpen?"▼":"▶"),1)]),t[7]||(t[7]=c("div",{id:"ui",class:"ui-controls"},null,-1)),c("button",{id:"recalculate",onClick:t[0]||(t[0]=(...n)=>r.calculate&&r.calculate(...n)),class:"calculate-button",disabled:i.loading},[i.loading?(T(),S("span",G,"Calculating...")):(T(),S("span",U,"Calculate"))],8,_)],32)]),i.loading?(T(),S("div",K,[t[8]||(t[8]=c("div",{class:"loading-spinner"},null,-1)),c("p",j,O(i.loadingMessage),1)])):N("",!0),c("div",{id:"split-view-container",class:k(["split-view-container",{hidden:i.loading}])},[c("div",Q,[t[11]||(t[11]=I('<h3 class="section-title">Strategy Comparison</h3><details class="key-details"><summary class="key-summary">Key:</summary><ul class="key-list"><li><span class="key-mark" style="background-color:#00cc00;"></span>3 RNKPNT</li><li><span class="key-mark" style="background-color:#ffcc00;"></span>2 RNKPNT</li><li><span class="key-mark" style="background-color:#ff9b00;"></span>1 RNKPNT</li><li><span class="key-mark" style="background-color:#ff3333;"></span>0 RNKPNT</li></ul></details>',2)),c("div",{class:k(["scroller",{scrollerOpen:i.isUiOpen}])},[c("div",$,[c("canvas",{id:"psChart",class:"chart",onClick:t[2]||(t[2]=(...n)=>r.handleChartClick&&r.handleChartClick(...n))}),c("canvas",{id:"piecesScoredchart",class:"chart",onClick:t[3]||(t[3]=(...n)=>r.handleChartClick&&r.handleChartClick(...n))}),t[9]||(t[9]=c("p",{class:"chart-note"},"Note that the color indicator for this graph is inaccurate b/c the points overlap.",-1)),c("canvas",{id:"scenarioChart",class:"chart",onClick:t[4]||(t[4]=(...n)=>r.handleChartClick&&r.handleChartClick(...n))}),t[10]||(t[10]=c("p",{id:"shiftkey"},null,-1)),c("canvas",{id:"rnkpntChart",class:"chart",onClick:t[5]||(t[5]=(...n)=>r.handleChartClick&&r.handleChartClick(...n))})])],2)]),t[14]||(t[14]=c("div",{id:"split-view-divider",class:"split-view-divider"},null,-1)),c("div",q,[t[13]||(t[13]=c("h3",{id:"selectedScenario",class:"section-title"},"Selected Scenario",-1)),c("div",{class:k(["scroller",{scrollerOpen:i.isUiOpen}])},t[12]||(t[12]=[I('<p id="tooltip" class="tooltip-container"></p><div class="chart-container"><details class="key-details"><summary class="key-summary">Key:</summary><ul class="key-list"><li><span class="key-mark" style="background-color:#000000;"></span>L4</li><li><span class="key-mark" style="background-color:#969696;"></span>L3</li><li><span class="key-mark" style="background-color:#c8c8c8;"></span>L2</li><li><span class="key-mark" style="background-color:#ffffff;border:1px solid black;"></span>L1</li></ul></details><canvas id="psotchart" class="chart"></canvas><canvas id="myChart" class="chart"></canvas><h3 class="section-title">Coral Scored by Level</h3><div class="table-responsive"><table class="data-table"><thead><tr><th class="text-center">Scoring Level</th><th class="text-center"># Scored</th></tr></thead><tbody><tr><td class="ta-c text-center">L4</td><td id="L4_Scored" class="text-center"></td></tr><tr><td class="ta-c text-center">L3</td><td id="L3_Scored" class="text-center"></td></tr><tr><td class="ta-c text-center">L2</td><td id="L2_Scored" class="text-center"></td></tr><tr id="L1"><td class="ta-c text-center">L1</td><td id="L1_Scored" class="text-center"></td></tr></tbody></table></div><h3 class="section-title">Play by Play</h3><div class="table-responsive"><table id="table_id" class="data-table play-by-play w-full"><thead><tr><th class="text-center">Event</th><th class="text-center">Time Left</th><th class="text-center">Elapsed Time</th></tr></thead><tbody></tbody></table></div></div>',2)]),2)])],2)])}const Y=z(w,[["render",J]]);export{Y as default};
